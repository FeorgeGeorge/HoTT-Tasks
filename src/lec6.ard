\import Data.Or
\import HLevel
\import Logic
\import MyFunctions
\import MyPaths
\import Paths
\import definitions
\import lec2
\import lec5 (t-prop=true)

---- ITEM 1 ----

\func excluded-middle-law => \Pi (A : \Prop) -> Or A (Not A)

\func \infix 9 ~=~ (A B : \Type) => \Sigma (f : A -> B) (g : B -> A) (\Pi (a : A) -> g (f a) = a) (\Pi  (b : B) -> f (g b) = b)

\func prop-is-2 => \Prop ~=~ Fin 2

\func decide-prop {A : \Prop} (x : Or A (Not A)) : Fin 2
  | inl a => 1
  | inr b => 0

\func decide-fin (x : Fin 2) : \Prop
  | 0 => Empty
  | 1 => \Sigma

\func lem=>prop-is-2 (lem : excluded-middle-law) : prop-is-2 =>
  (\lam p => decide-prop (lem p), decide-fin, eq1, eq2) \where {
  \lemma eq1 (A : \Prop) : decide-fin (decide-prop (lem A)) = A =>
    propExt (\lam a' => \case (lem A) \with {
      | inl a => a
      | inr b => absurd (transport decide-fin (dec-prop-lemma-0 b (lem A)) a')
    }) (\lam a => transport decide-fin (inv (dec-prop-lemma-1 a (lem A))) ())

  \lemma eq2 (b : Fin 2) : decide-prop (lem (decide-fin b)) = b
    | 0 => dec-prop-lemma-0 (\lam x => x) (lem Empty)
    | 1 => dec-prop-lemma-1 () (lem (\Sigma))

  \func dec-prop-lemma-1 {A : \Prop} (a : A) (x : Or A (Not A)) : decide-prop x = 1
    | a, inl a1 => idp
    | a, inr b => absurd (b a)

  \func dec-prop-lemma-0 {A : \Prop} (a : Not A) (x : Or A (Not A)) : decide-prop x = 0
    | a, inl a1 => absurd (a a1)
    | a, inr b => idp

}

\func injective {A B : \Type} (f : A -> B) => \Pi (a b : A) -> f a = f b -> a = b
\func \infix 8 >-> (A B : \Type) => \Sigma (f : A -> B) (injective f)

\func isFin (A : \Type) => \Sigma (n : Nat) (TruncP (A ~=~ Fin n))
-- this definition is equivalent to the given one

\func isSFin (A : \Type) => \Sigma (n : Nat) (TruncP (A >-> Fin n))
\func prop-is-2=>prop-is-fin (prop-fin : TruncP (\Prop ~=~ Fin 2)) : isFin \Prop => (2, prop-fin)

\func isFin=>isSFin {A : \Type} (f : isFin A) : isSFin A =>
  (f.1, TruncP.map f.2 (\lam (f1, g, eq1, _) => (f1, section-is-inj f1 g eq1)))

\func prop-SFin => isSFin \Prop

\func p-lemma (A : \Prop) (not-true : Not (A = (\Sigma))) : Not A => \lam a => not-true (t-prop=true.1 a)

\func or-prop {A : \Prop} : isProp (Or A (Not A)) => Or.levelProp contr

----- ----- -----

---- ITEM 5 ----

\func inj-pullback-is-inj {A B : \Set} {C : \Type} (f : A -> C) (g : B -> C) (g-inj : injective g) : injective (pullback-g f g)
  => \lam x y eq => {?}

