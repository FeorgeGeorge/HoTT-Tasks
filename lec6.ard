\import Data.Or
\import Logic
\import Paths

-- item 1
\func excluded-middle-law => \Pi (A : \Prop) -> Or A (Not A)

\func \infix 9 ~=~ (A B : \Type) => \Sigma (f : A -> B) (g : B -> A) (\Pi (a : A) -> g (f a) = a) (\Pi  (b : B) -> f (g b) = b)

\func prop-is-2 => \Prop ~=~ Fin 2

\func decide-prop {A : \Prop} (x : Or A (Not A)) : Fin 2
  | inl a => 1
  | inr b => 0

\func decide-fin (x : Fin 2) : \Prop
  | 0 => Empty
  | 1 => \Sigma

\func lem=>prop-is-2 (lem : excluded-middle-law) : prop-is-2 =>
  (\lam p => decide-prop (lem p), decide-fin, eq1, eq2) \where {
  \lemma eq1 (A : \Prop) : decide-fin (decide-prop (lem A)) = A =>
    propExt (\lam a' => \case (lem A) \with {
      | inl a => a
      | inr b => absurd (transport decide-fin (dec-prop-lemma-0 b (lem A)) a')
    }) (\lam a => transport decide-fin (inv (dec-prop-lemma-1 a (lem A))) ())

  \lemma eq2 (b : Fin 2) : decide-prop (lem (decide-fin b)) = b
    | 0 => dec-prop-lemma-0 (\lam x => x) (lem Empty)
    | 1 => dec-prop-lemma-1 () (lem (\Sigma))

  \func dec-prop-lemma-1 {A : \Prop} (a : A) (x : Or A (Not A)) : decide-prop x = 1
    | a, inl a1 => idp
    | a, inr b => absurd (b a)

  \func dec-prop-lemma-0 {A : \Prop} (a : Not A) (x : Or A (Not A)) : decide-prop x = 0
    | a, inl a1 => absurd (a a1)
    | a, inr b => idp

}

\func injective {A B : \Type} (f : A -> B) => \Pi (a b : A) -> f a = f b -> a = b
\func \infix 8 >-> (A B : \Type) => \Sigma (f : A -> B) (injective f)

\func isFin (A : \Type) => \Sigma (n : Nat) (TruncP (A ~=~ Fin n))
-- this definition is equivalent to the given one

\func isSFin (A : \Type) => \Sigma (n : Nat) (TruncP (A >-> Fin n))
\func prop-is-2=>prop-is-fin (prop-fin : TruncP (\Prop ~=~ Fin 2)) : isFin \Prop => (2, prop-fin)

\func sec {A B : \Type} (f : A -> B) (g : B -> A) (sec : \Pi (a : A) -> g (f a) = a) : injective f =>
  \lam a b f-eq => inv (sec a) *> pmap g f-eq *> sec b
\func isFin=>isSFin {A : \Type} (f : isFin A) : isSFin A =>
  (f.1, TruncP.map f.2 (\lam (f1, g, eq1, _) => (f1, sec f1 g eq1)))

-- isSFin => LEM
\func prop-SFin => isSFin \Prop

\data \infix 5 <= (n m : Nat) \with
  | 0, _ => zero-less
  | suc n, suc m => suc-less (n <= m)

\func absurd-fin-0 {A : \Type} (x : Fin 0) : A

--\open Nat (+)
--
--\func \infix 6 - (n m : Nat) : Nat
--  | 0, 0 => 0
--  | 0, suc m => 0
--  | suc n, 0 => suc n
--  | suc n, suc m => n - m
--
--\func minus-lemma (x : Nat) : x - 0 = x
--  | 0 => idp
--  | suc x => idp
--
--\func -eq (x y : Nat) (ineq : x <= y): x + (y - x) = y\elim x, y, ineq
--  | 0, y, zero-less => minus-lemma y
--  | suc x, suc y, suc-less ineq => pmap suc (-eq x y ineq)

--\func can-inject {n : Nat} (x : Fin (suc n)) (ineq : suc x <= n) : Fin n
--  | {suc n}, n1, suc-less ineq => {?}
--
--\func fin-lemma (n m : Nat) (inj : Fin (suc n) >-> Fin (suc m)) : \Sigma (inj' : Fin (suc n) >-> Fin (suc m)) (inj'.1 n = m)
--  => ((new-func, {?}), {?}) \where {
--
--  \func new-func (x : Fin (suc n)) : Fin (suc m) => inj.1 x + (m - inj.1 n)
--
--  \func fin-inj (eq : inj.1 n = m) : Fin n >-> Fin m =>
--    (\lam x => {?}, {?})
--}
--
--\func fin-less (n m : Nat) (inj : Fin n >-> Fin m) : n <= m \elim n, m
--  | 0, _ => zero-less
--  | suc n, 0 => absurd-fin-0 (inj.1 0)
--  | suc n, suc m => suc-less (fin-less n m {?})